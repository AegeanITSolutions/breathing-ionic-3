import { Inject, Injectable, NgModule, Optional, SkipSelf } from '@angular/core';
import { AngularFire } from 'angularfire2';
import { AngularFireOfflineDatabase } from './src/database';
import { LOCALFORAGE_PROVIDER, LocalForageToken } from './src/localforage';
import { LocalUpdateService, LOCAL_UPDATE_SERVICE_PROVIDER } from './src/local-update-service';
export { AfoListObservable } from './src/afo-list-observable';
export { AfoObjectObservable } from './src/afo-object-observable';
export var AngularFireOffline = (function () {
    function AngularFireOffline(database) {
        this.database = database;
    }
    AngularFireOffline.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AngularFireOffline.ctorParameters = function () { return [
        { type: AngularFireOfflineDatabase, },
    ]; };
    return AngularFireOffline;
}());
export function ANGULARFIRE_OFFLINE_PROVIDER_FACTORY(parent, AngularFire, token, LocalUpdateService) {
    return parent || new AngularFireOffline(new AngularFireOfflineDatabase(AngularFire, token, LocalUpdateService));
}
;
export var ANGULARFIRE_OFFLINE_PROVIDER = {
    provide: AngularFireOffline,
    deps: [
        [new Optional(), new SkipSelf(), AngularFireOffline],
        AngularFire,
        [new Inject(LocalForageToken)],
        LocalUpdateService
    ],
    useFactory: ANGULARFIRE_OFFLINE_PROVIDER_FACTORY
};
export var AngularFireOfflineModule = (function () {
    function AngularFireOfflineModule() {
    }
    AngularFireOfflineModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    providers: [
                        ANGULARFIRE_OFFLINE_PROVIDER,
                        LOCALFORAGE_PROVIDER,
                        LOCAL_UPDATE_SERVICE_PROVIDER
                    ],
                    declarations: []
                },] },
    ];
    /** @nocollapse */
    AngularFireOfflineModule.ctorParameters = function () { return []; };
    return AngularFireOfflineModule;
}());
