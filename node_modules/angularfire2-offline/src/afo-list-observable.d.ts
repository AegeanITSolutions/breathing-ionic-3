import { ReplaySubject } from 'rxjs';
import { LocalUpdateService } from './local-update-service';
export declare class AfoListObservable<T> extends ReplaySubject<T> {
    private ref;
    private localUpdateService;
    /**
     * The Firebase path used for the related FirebaseListObservable
     */
    path: string;
    /**
     * An array used to store write operations that require an initial value to be set
     * in {@link value} before being applied
     */
    que: any[];
    /**
     * The current value of the {@link AfoListObservable}
     */
    value: any;
    /**
     * The value preceding the current value.
     */
    private previousValue;
    /**
     * Creates the {@link AfoListObservable}
     * @param ref a reference to the related FirebaseListObservable
     * @param localUpdateService the service consumed by {@link OfflineWrite}
     */
    constructor(ref: any, localUpdateService: LocalUpdateService);
    /**
     * Emulates an offline write assuming the remote data has not changed
     * @param method AngularFire2 write method to emulate
     * @param value new value to write
     * @param key optional key used with some write methods
     */
    emulate(method: any, value?: any, key?: any): void;
    /**
     * - Gets the path of the reference
     * - Subscribes to the observable so that emulation is applied after there is an initial value
     */
    init(): void;
    /**
     * Only calls next if the new value is unique
     */
    uniqueNext(newValue: any): void;
    /**
     * Wraps the AngularFire2 FirebaseListObservable [push](https://goo.gl/nTe7C0) method
     *
     * - Emulates a push locally
     * - Calls the AngularFire2 push method
     * - Saves the write locally in case the browser is refreshed before the AngularFire2 promise
     * completes
     */
    push(value: any): any;
    /**
     * Wraps the AngularFire2 FirebaseListObservable [update](https://goo.gl/oSWgqn) method
     *
     * - Emulates a update locally
     * - Calls the AngularFire2 update method
     * - Saves the write locally in case the browser is refreshed before the AngularFire2 promise
     * completes
     */
    update(key: string, value: any): firebase.Promise<void>;
    /**
     * Wraps the AngularFire2 FirebaseListObservable [remove](https://goo.gl/MkZTtv) method
     *
     * - Emulates a remove locally
     * - Calls the AngularFire2 remove method
     * - Saves the write locally in case the browser is refreshed before the AngularFire2 promise
     * completes
     * @param remove if you omit the `key` parameter from `.remove()` it deletes the entire list.
     */
    remove(key?: string): firebase.Promise<void>;
    /**
     * Convenience method to save an offline write
     *
     * @param promise
     * [the promise](https://goo.gl/5VLgQm)
     * returned by calling an AngularFire2 method
     * @param type the AngularFire2 method being called
     * @param args an optional array of arguments used to call an AngularFire2 method taking the form of [newValue, options]
     */
    private offlineWrite(promise, type, args);
    /**
     * Calculates the result of a given emulation without updating subscribers of this Observable
     *
     * - this allows for the processing of many emulations before notifying subscribers
     * @param method the AngularFire2 method being emulated
     * @param value the new value to be used by the given method
     * @param key can be used for remove and required for update
     */
    private processEmulation(method, value, key);
    /**
     * Sends the the current {@link value} to all subscribers
     */
    private updateSubscribers();
}
